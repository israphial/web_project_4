(()=>{"use strict";var e={formSelector:".edit-form",inputSelector:".edit-form__input",submitButtonSelector:".edit-form__save-button",inactiveButtonClass:"edit-form__save-button_disabled",inputErrorClass:"edit-form__input_type_error",errorClass:"edit-form__error_active"},t=document.querySelector(".cards__container"),r=document.querySelector(".profile__edit"),n=document.querySelector(".profile__add"),o=document.querySelector(".profile__edit-avatar-button"),i=(document.querySelector(".popup__close-button_type_profile"),document.querySelector(".popup__close-button_type_add-card"),document.querySelector(".popup__close-button_type_image"),document.querySelector(".popup__close-button_type_edit-avatar"),document.querySelector(".popup__close-button_type_delete-card"),document.querySelector(".edit-form__save-button"),document.querySelector("edit-form__save-button_type_add-card"),document.querySelector(".edit-form__save-button_type_edit-avatar"),document.querySelector(".edit-form__save-button_type_delete-card"),document.querySelector(".popup_type_profile")),a=document.querySelector(".popup_type_add-card"),c=document.querySelector(".popup_type_image"),u=document.querySelector(".popup_type_edit-avatar"),s=document.querySelector(".popup_type_delete-card"),l=document.querySelector(".edit-form_type_profile"),f=document.querySelector(".edit-form__form_type_add-card"),d=document.querySelector(".edit-form__form_type_edit-avatar"),p=document.querySelector(".edit-form__form_type_delete-card"),_=document.querySelector(".profile__header"),h=document.querySelector(".profile__description"),y=document.querySelector(".edit-form__input_type_header"),m=document.querySelector(".edit-form__input_type_description"),v=(document.querySelector(".edit-form__input_type_avatar-url"),document.querySelector(".popup__image"),document.querySelector(".popup__image-caption"),document.querySelector(".edit-form__input_type_title"),document.querySelector(".edit-form__input_type_url"),document.querySelector("#card-template").content),b=document.querySelector(".profile__picture"),k=(document.querySelector(".popup_type_image"),document.querySelector(".popup__image"),document.querySelector(".popup__image-caption"),function(e,t){var r=t.querySelector(".edit-form__save-button"),n=r.textContent,o=r.getAttribute("data-loading-state");if(e)r.textContent=o,r.setAttribute("data-loading-state",n);else{var i=n;r.textContent=o,r.setAttribute("data-loading-state",i)}});function g(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var S=function(){function e(t,r,n,o,i,a,c){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._data=t,this._cardText=t.name,this._cardLink=t.link,this._cardId=t._id,this._ownerId=t.owner._id,this._likes=t.likes,this._currentUserId=r,this._cardSelector=n,this._handleCardClick=o,this._handleCardDelete=i,this._deleteAllowed=a,this._handleCardLike=c}var t,r;return t=e,(r=[{key:"_setDeleteIcon",value:function(){this._deleteAllowed||(this._cardDeleteButton.style.display="none")}},{key:"_hasThisUserLiked",value:function(){var e=this;return this._likes.some((function(t){return t._id===e._currentUserId}))}},{key:"_getTemplate",value:function(){return this._cardSelector.querySelector(".card").cloneNode(!0)}},{key:"_handleHeartClick",value:function(e){this._hasThisUserLiked()?this._handleCardLike(!0):this._handleCardLike(!1)}},{key:"_setEventListeners",value:function(){var e=this;this._setDeleteIcon(),this._deleteAllowed&&this._cardDeleteButton.addEventListener("click",(function(){e._handleCardDelete(e._cardId,e._cardElement)})),this._heartIcon.addEventListener("click",(function(t){e._handleHeartClick(t)})),this._cardImage.addEventListener("click",(function(){e._handleCardClick(e._cardLink,e._cardText)}))}},{key:"returnCardID",value:function(){return this._cardId}},{key:"updateCardLikes",value:function(e){this._likes=e,this._heartIcon.classList.toggle("card__social-symbol_liked"),this._likesDisplay.textContent=e.length}},{key:"createCard",value:function(){return this._cardElement=this._getTemplate(),this._heartIcon=this._cardElement.querySelector(".card__social-symbol"),this._cardImage=this._cardElement.querySelector(".card__picture"),this._likesDisplay=this._cardElement.querySelector(".card__like-count"),this._cardDeleteButton=this._cardElement.querySelector(".card__delete-button"),this._cardElement.querySelector(".card__name").textContent=this._cardText,this._cardImage.src=this._cardLink,this._cardImage.alt=this._cardText,this._hasThisUserLiked()&&this._heartIcon.classList.add("card__social-symbol_liked"),this._likesDisplay.textContent=this._likes.length,this._setEventListeners(),this._cardElement}}])&&g(t.prototype,r),e}();function E(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var C=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._settings=t,this._formElement=r}var t,r;return t=e,(r=[{key:"_showInputError",value:function(e,t){var r=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._settings.inputErrorClass),r.classList.add(this._settings.errorClass),r.textContent=t}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector("#".concat(e.id,"-error"));t.classList.remove(this._settings.errorClass),t.textContent="",e.classList.remove(this._settings.inputErrorClass)}},{key:"_toggleButtonState",value:function(e,t){this._hasInvalidInput(e)?(t.disabled=!0,t.classList.add(this._settings.inactiveButtonClass)):(t.disabled=!1,t.classList.remove(this._settings.inactiveButtonClass))}},{key:"_hasInvalidInput",value:function(e){return e.some((function(e){return!e.validity.valid}))}},{key:"_isValid",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_setEventListeners",value:function(){var e=this,t=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),r=this._formElement.querySelector(this._settings.submitButtonSelector);this._toggleButtonState(t,r),t.forEach((function(n){n.addEventListener("input",(function(){e._isValid(n),e._toggleButtonState(t,r)}))}))}},{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&E(t.prototype,r),e}();function w(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var O=function(){function e(t,r){var n=t.data,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._data=n,this._renderer=o,this._container=r}var t,r;return t=e,(r=[{key:"renderElements",value:function(){var e=this;this._data.forEach((function(t){e._renderer(t)}))}},{key:"addItem",value:function(e){this._container.append(e)}},{key:"addNewItem",value:function(e){this._container.prepend(e)}}])&&w(t.prototype,r),e}();function L(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var j=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupSelector=t,this._handleEscClose=this._handleEscClose.bind(this)}var t,r;return t=e,(r=[{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._closeButton=this._popupSelector.querySelector(".popup__close-button"),this._closeButton.addEventListener("click",(function(){e.close()})),this._popupSelector.addEventListener("click",(function(t){t.target.classList.contains("popup")&&e.close()}))}},{key:"open",value:function(){this._popupSelector.classList.add("popup_visible"),document.addEventListener("keyup",this._handleEscClose)}},{key:"close",value:function(){this._popupSelector.classList.remove("popup_visible"),document.removeEventListener("keyup",this._handleEscClose)}}])&&L(t.prototype,r),e}();function q(e){return(q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function P(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function I(e,t,r){return(I="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=R(e)););return e}(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(r):o.value}})(e,t,r||e)}function U(e,t){return(U=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function T(e,t){return!t||"object"!==q(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function R(e){return(R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var D=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&U(e,t)}(a,e);var t,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=R(n);if(o){var r=R(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return T(this,e)});function a(e,t,r){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._form=n._popupSelector.querySelector(".edit-form__form"),n._formSubmissionCallback=t,n._formOpenCallback=r,n}return t=a,(r=[{key:"_getInputValues",value:function(){var e=this;return this._inputList=this._form.querySelectorAll(".edit-form__input"),this._inputValues={},this._inputList.forEach((function(t){e._inputValues[t.name]=t.value})),this._inputValues}},{key:"setEventListeners",value:function(){var e=this;I(R(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._formSubmissionCallback(e._getInputValues())}))}},{key:"close",value:function(){I(R(a.prototype),"close",this).call(this),this._form.reset()}},{key:"open",value:function(){I(R(a.prototype),"open",this).call(this),null!=this._formOpenCallback&&this._formOpenCallback()}}])&&P(t.prototype,r),a}(j);function x(e){return(x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function A(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function B(e,t,r){return(B="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=H(e)););return e}(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(r):o.value}})(e,t,r||e)}function N(e,t){return(N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function V(e,t){return!t||"object"!==x(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function H(e){return(H=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var J=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&N(e,t)}(a,e);var t,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=H(n);if(o){var r=H(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return V(this,e)});function a(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),i.call(this,e)}return t=a,(r=[{key:"open",value:function(e,t){this._popupSelector.querySelector(".popup__image").src=e,this._popupSelector.querySelector(".popup__image-caption").textContent=t,B(H(a.prototype),"open",this).call(this)}}])&&A(t.prototype,r),a}(j);function z(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var G=function(){function e(t,r,n,o){var i=t.currentUserName,a=t.currentUserOccupation,c=t.avatar,u=t.id;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=i,this._userOccupation=a,this._avatar=c,this._id=u,this._profileHeaderContents=r,this._profileDescriptionContents=n,this._profileAvatar=o}var t,r;return t=e,(r=[{key:"returnUserID",value:function(){return this._id}},{key:"getUserInfo",value:function(){return this._userObj={username:this._userName,occupation:this._userOccupation},this._userObj}},{key:"setUserInfo",value:function(e){var t=e.currentUserName,r=e.currentUserOccupation;this._profileHeaderContents.textContent=t,this._profileDescriptionContents.textContent=r,this._userName=t,this._userOccupation=r}},{key:"setAvatar",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this._profileAvatar.src=e?e.avatarURL:this._avatar}}])&&z(t.prototype,r),e}();function M(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var F=function(){function e(t){var r=t.baseUrl,n=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=r,this._headers=n}var t,r;return t=e,(r=[{key:"apiTester",value:function(){fetch(this._baseUrl+"/cards",{method:"GET",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}},{key:"getAllCards",value:function(){return fetch(this._baseUrl+"/cards/",{headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status," ").concat(e.statusText))}))}},{key:"getUserInfo",value:function(){return fetch(this._baseUrl+"/users/me",{headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status," ").concat(e.statusText))}))}},{key:"setUserInfo",value:function(e){var t=e.name,r=e.about;return fetch(this._baseUrl+"/users/me",{headers:this._headers,method:"PATCH",body:JSON.stringify({name:t,about:r})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status," ").concat(e.statusText))}))}},{key:"addNewCard",value:function(e){var t=e.name,r=e.link;return fetch(this._baseUrl+"/cards/",{headers:this._headers,method:"POST",body:JSON.stringify({name:t,link:r})}).then((function(e){return e.ok?e.json():Promise.reject("Error, "+e.status)}))}},{key:"deleteCard",value:function(e){return fetch(this._baseUrl+"/cards/"+e,{headers:this._headers,method:"DELETE"}).then((function(e){return e.ok?e.json():Promise.reject("Error, "+e.status)}))}},{key:"addCardLike",value:function(e){return fetch(this._baseUrl+"/cards/likes/".concat(e),{headers:this._headers,method:"PUT"}).then((function(e){return e.ok?e.json():Promise.reject("Error, ".concat(e.status))}))}},{key:"removeCardLike",value:function(e){return fetch(this._baseUrl+"/cards/likes/".concat(e),{headers:this._headers,method:"DELETE"}).then((function(e){return e.ok?e.json():Promise.reject("Error, ".concat(e.status))}))}},{key:"updateAvatar",value:function(e){return fetch(this._baseUrl+"/users/me/avatar",{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e.avatarURL})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}}])&&M(t.prototype,r),e}();function K(e){return(K="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Q(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function W(e,t,r){return(W="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Z(e)););return e}(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(r):o.value}})(e,t,r||e)}function X(e,t){return(X=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Y(e,t){return!t||"object"!==K(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Z(e){return(Z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var $=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&X(e,t)}(a,e);var t,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Z(n);if(o){var r=Z(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return Y(this,e)});function a(e,t,r,n){var o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(o=i.call(this,e))._form=o._popupSelector.querySelector(".edit-form__form"),o._card=r,o._id=n,o._submitCallback=t,o}return t=a,(r=[{key:"_handleSubmit",value:function(e){e.preventDefault(),this._submitCallback(this._id,this._card)}},{key:"open",value:function(e,t){W(Z(a.prototype),"open",this).call(this),this._id=e,this._card=t}},{key:"setEventListeners",value:function(){var e=this;W(Z(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){e._handleSubmit(t)}))}}])&&Q(t.prototype,r),a}(j),ee=function(t){var r=new C(e,t);return r.enableValidation(),r},te=(ee(l),ee(f),ee(d),ee(p),new F({baseUrl:"https://around.nomoreparties.co/v1/group-7",headers:{authorization:"be27dd99-9631-4f9f-ab55-fc3bfe11bfdc","Content-Type":"application/json"}}));Promise.all([te.getUserInfo(),te.getAllCards()]).then((function(e){var g=e[0],E=e[1],C=new J(c);C.setEventListeners();var w=function(e,t){C.open(e,t)},L=new G({currentUserName:g.name,currentUserOccupation:g.about,avatar:g.avatar,id:g._id},_,h,b);L.setUserInfo({currentUserName:g.name,currentUserOccupation:g.about}),L.setAvatar();var j=new D(i,(function(e){k(!0,l),te.setUserInfo({name:e.profileName,about:e.profileDescription}).then((function(){L.setUserInfo({currentUserName:e.profileName,currentUserOccupation:e.profileDescription}),k(!1,l),j.close()})).catch((function(e){return console.log(e)}))}),(function(){var e=L.getUserInfo(),t=e.username,r=e.occupation;y.value=t,m.value=r})),q=new D(u,(function(e){k(!0,d),te.updateAvatar(e).then((function(){k(!1,d),L.setAvatar(e),q.close()})).catch((function(e){return console.log(e)}))}));q.setEventListeners(),o.addEventListener("click",(function(){q.open()})),r.addEventListener("click",(function(){j.open()})),j.setEventListeners();var P=function(e,t){var r=new S(e,U,t,w,I,L.returnUserID()===e.owner._id,(function(t){t?te.removeCardLike(e._id).then((function(e){var t=e.likes;r.updateCardLikes(t)})).catch((function(e){return console.log(e)})):te.addCardLike(e._id).then((function(e){var t=e.likes;r.updateCardLikes(t)})).catch((function(e){return console.log(e)}))}));return r.createCard()},I=function(e,t){x.open(e,t)},U=L.returnUserID(),T=new O({data:E,renderer:function(e){var t=P(e,v);T.addItem(t)}},t);T.renderElements();var R=new D(a,(function(e){k(!0,f),te.addNewCard({name:e.cardTitle,link:e.cardURL}).then((function(e){var t=P(e,v);T.addNewItem(t),k(!1,f),R.close()})).catch((function(e){return console.log(e)}))}),(function(){f.reset()}));n.addEventListener("click",(function(){R.open()})),R.setEventListeners();var x=new $(s,(function(e,t){k(!0,p),te.deleteCard(e).then((function(){k(!1,p),t.remove(),x.close()})).catch((function(e){return console.log(e)}))}));x.setEventListeners()})).catch((function(e){return console.log(e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,